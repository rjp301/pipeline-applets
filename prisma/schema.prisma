// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url  	= env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  api_key   String @unique @default(uuid())
  email     String @default("")
  full_name String @default("")
  company   String @default("")

  @@map("users")
}

model Centerline {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  name        String             @default("")
  description String             @default("")
  line        String
  crs         String             @default("ESPG:4326")
  
  markers     CenterlineMarker[]
  topcon_runs TopconRun[]

  @@map("centerlines")
}

model CenterlineMarker {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  value         Float
  x             Float
  y             Float
  centerline_id Int
  Centerline    Centerline @relation(fields: [centerline_id], references: [id], onDelete: Cascade)

  @@map("centerline_markers")
}

model TopconRun {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  width_bot     Float
  slope         Float
  ditch_profile String @default("")
  total_volume  Float
  data_crs      String @default("EPSG:4326")
  KP_beg        Float
  KP_end        Float
  KP_rng        String

  data_pts TopconDataPts[]
  data_rng TopconDataRng[]

  centerline_id Int
  Centerline    Centerline @relation(fields: [centerline_id], references: [id], onDelete: Cascade)

  @@map("topcon_runs")
}

model TopconDataPts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  num       Float
  y         Float
  x         Float
  z         Float
  desc      String @default("")
  geometry  String
  chainage  Float?
  depth     Float?
  slope     Float?
  width_bot Float?
  width_top Float?
  area      Float?

  run_id    Int
  TopconRun TopconRun @relation(fields: [run_id], references: [id], onDelete: Cascade)

  @@map("topcon_data_pts")
}

model TopconDataRng {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KP_beg   Float
  KP_end   Float
  area_beg Float
  area_end Float
  area_avg Float
  length   Float
  volume   Float

  run_id    Int
  TopconRun TopconRun @relation(fields: [run_id], references: [id], onDelete: Cascade)

  @@map("topcon_data_rng")
}
